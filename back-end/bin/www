#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('back-end:server');
 var http = require('http');
 const socketIo = require("socket.io");
 const { emit, response } = require('../app');
 
 
 /**
  * Get port from environment and store in Express.
  */
 
 var port = normalizePort(process.env.PORT || '3001');
 app.set('port', port);
 
 /**
  * Create HTTP server.
  */
 
 var server = http.createServer(app);
 
 /**
  * Listen on provided port, on all network interfaces.
  */
 
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }
 
 
 const io = socketIo(server,{
   cors: {
     origin: "http://localhost:3000",
     methods: ["GET", "POST"]
   }
 });
 
 var isEven = Math.floor(Math.random() * 1000 ) % 2 === 0
 
 var rooms = {}

 /**
 * Find a room that has one id
 * 
 */
  const findRoom = () => {

    for(let r of Object.keys(rooms)) {
    
      console.log("Match Room " + r + " Len " + rooms[r].length)
      if (rooms[r].length === 1) {
        console.log('Match')
        console.log(r)
        return r
      }

    }
    console.log('No Match')
    return ''
    
  
   }
 
 io.on('connection', socket => {
 
   const count = io.engine.clientsCount;
   let roomNum = count/2
   console.log("Current Room Number",roomNum)
   roomNum = Math.round(roomNum)
 
   let room = `Room-${roomNum}`
   console.log(`Client Count ${count} roomNum ${roomNum}`)
   console.log(room)
   let matchingRoom = findRoom()
   room = matchingRoom ? matchingRoom : room
 
 
 
 
    socket.join(room)
    console.log("Socket Rooms" + socket.rooms)
 
 
 
    socket.on('Join Game', () => {
 
 
      socket.data.isX = isEven 
      socket.emit('Join Game',isEven)
     
      isEven = !isEven

      console.log(socket.rooms)

      if (rooms.hasOwnProperty(room)) {
        
        rooms[room].push(socket.id)
      }

      else {

        rooms[room] = [socket.id]
      }
      
 
      rooms[room].length === 2 && io.to(room).emit('Start Game',room)
    })
 
 
    socket.on('Rematch',(res,r) => {
 
 
     socket.to(r).emit('Rematch',res)
    })
 
    socket.on('Mark',(r,i)=> {
 
 
 
     io.to(r).emit('Mark', i, socket.data.isX)
    })
 
 
 
 
  
 
   socket.on('Leave Game', (r,msg="User left, click to go to the main menu") => {
 
     console.log('Leave Room',r)
 
     
     io.to(r).emit('Leave Game',msg)
   })
 

 
   socket.on("disconnecting", (reason) => {
 
     console.log("Reason",reason)
     console.log("Socket",socket.rooms)
 
     socket.rooms.forEach(r => {
 
       if (r !== socket.id) {
         
         rooms[r] = []
         socket.to(r).emit('Leave Game',"User left, click to go to the main menu")
         
         
       }
 
     })
   });
 })
 