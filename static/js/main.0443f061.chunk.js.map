{"version":3,"sources":["styles/Game.module.css","styles/Board.module.css","styles/GameModal.module.css","styles/Home.module.css","styles/Square.module.css","styles/Button.module.css","hooks/useGame.jsx","components/Square.jsx","helpers.js","components/Board.jsx","components/Button.jsx","components/GameModal.jsx","pages/TwoPlayer.jsx","constants.js","pages/Home.jsx","pages/SinglePlayer.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","useGame","useState","isX","setIsX","Array","fill","squares","setSquares","xTurn","setXTurn","markSquare","i","x","map","square","index","toggleX","toggleXTurn","turn","resetSquares","Square","props","value","handleClick","yourTurn","onClick","className","styles","calculateWinner","lines","length","a","b","c","containsNull","includes","Board","msg","Fragment","title","board","Button","text","btn","GameModal","handleRematch","wantRematch","setMsg","useEffect","dialog","open","TwoPlayer","game","room","setRoom","rematchRequests","setRematchRequests","isOpen","setIsOpen","histroy","useHistory","setWantRematch","socketRef","useRef","socket","socketIOClient","current","emit","on","res","requests","close","push","Home","history","container","SinglePlayer","useCallback","nullArray","Math","random","floor","chooseIndex","App","basename","process","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0443f061.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__3BW-e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__1oBCK\",\"turn\":\"Board_turn__MXL-J\",\"title\":\"Board_title__52m9Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"GameModal_title__2KBcm\",\"dialog\":\"GameModal_dialog___lyuC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__Mgayj\",\"title\":\"Home_title__3qwX2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"Square_square__18Cnv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1vtC0\"};","import { useState } from 'react';\r\n\r\n\r\n\r\nconst useGame = () => {\r\n\r\n    const [isX, setIsX] = useState(true)\r\n    const [squares, setSquares] = useState(Array(9).fill(null))\r\n\r\n\r\n    const [xTurn, setXTurn] = useState(true)\r\n\r\n    /**\r\n     * Reset squares \r\n     */\r\n    const resetSquares = () => setSquares(Array(9).fill(null))\r\n\r\n    /**\r\n     * toggles X value\r\n     */\r\n    const toggleX = () => {\r\n\r\n        setIsX(x => !x)\r\n    }\r\n\r\n\r\n    /**\r\n     * toggles xTurn value\r\n     */\r\n    const toggleXTurn = () => {\r\n\r\n        setXTurn(turn => !turn)\r\n    }\r\n\r\n\r\n   /**\r\n    * \r\n    * Mark the square with the given index with if 'X' if the the given user is 'X' and 'O' if not\r\n    * @param {Number} i \r\n    */\r\n    const markSquare = (i,x) => {\r\n\r\n        setSquares(squares => squares.map((square,index) => {\r\n\r\n            if (index === i) {\r\n                \r\n                \r\n                return x ? 'X' : 'O' \r\n            }\r\n\r\n            return square\r\n\r\n        }))\r\n\r\n    }\r\n\r\n    return {markSquare, toggleX, toggleXTurn,resetSquares ,squares,xTurn,isX}\r\n\r\n}\r\n\r\nexport default useGame","import React from 'react'\r\nimport styles from '../styles/Square.module.css'\r\nimport PropTypes from 'prop-types'\r\n\r\n function Square(props) {\r\n\r\n    const {value,index,handleClick,isX,yourTurn} = props\r\n    return (\r\n       <button onClick = {() => yourTurn && handleClick(index,isX)} className = {styles.square}>\r\n\r\n           {value}\r\n\r\n       </button>\r\n    )\r\n}\r\n\r\nSquare.propTypes  = {\r\n\r\n    value: PropTypes.string,\r\n    handleClick: PropTypes.func,\r\n    index:PropTypes.number,\r\n    isX:PropTypes.bool,\r\n    yourTurn:PropTypes.bool,\r\n}\r\nexport default Square","\r\n/**\r\n * Determine if there is a winner from the given squares\r\n * @param {Array} squares  the given squares\r\n * @returns a number if there a winner and null if not\r\n */\r\nexport const calculateWinner = (squares) => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * \r\n * @param {Array} squares  the given array\r\n * @returns true if the given array contains a null value and false if not\r\n */\r\nexport const containsNull = (squares) => squares.includes(null)\r\n\r\n","import React from 'react'\r\nimport Square from './Square'\r\nimport PropTypes from 'prop-types'\r\nimport styles from '../styles/Board.module.css'\r\nimport { calculateWinner, containsNull } from '../helpers'\r\n function Board(props) {\r\n\r\n    const {squares,handleClick,xTurn,isX} = props\r\n  \r\n    const yourTurn = (isX && xTurn ) || ( !isX && !xTurn )\r\n\r\n    \r\n\r\n    let msg = null\r\n\r\n    if (!containsNull(squares)) {\r\n        \r\n        msg = \"It's a draw\"\r\n    }\r\n\r\n    if (calculateWinner(squares)) {\r\n\r\n        msg =  !yourTurn ? \"You Won\" : \"You lose\"    \r\n      \r\n    }\r\n    \r\n   let turn = ''\r\n\r\n   if (yourTurn) {\r\n       \r\n    turn = \"Your Turn\"\r\n   }\r\n\r\n else {\r\n\r\n   turn = xTurn ? \"X Turn\" : \"O Turn\"\r\n }\r\n\r\n    return (\r\n        <React.Fragment >\r\n\r\n<h1 className = {styles.title}> Tic-Tac-Toe</h1>\r\n\r\n<div className = {styles.board}>\r\n{squares.map((square,index) => <Square yourTurn = {yourTurn} isX = {isX} index = {index} handleClick = {handleClick} key = {index} value = {square} />)}\r\n </div>  \r\n\r\n                     <div className = {styles.turn} >     { msg ? msg : turn } </div>          \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nBoard.propTypes = {\r\n\r\n    squares: PropTypes.arrayOf(PropTypes.string),\r\n    xTurn: PropTypes.bool,\r\n    isX:PropTypes.bool,\r\n    handleClick:PropTypes.func,\r\n\r\n}\r\n\r\nexport default Board","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styles from '../styles/Button.module.css'\r\n\r\nfunction Button(props) {\r\n\r\n    const {handleClick,text} = props\r\n    return (\r\n\r\n        <button className = {styles.btn} onClick = {handleClick}>{text}</button>\r\n\r\n    )\r\n}\r\n\r\nButton.propTypes = {\r\n\r\n    handleClick: PropTypes.func,\r\n    text:PropTypes.string,\r\n  }\r\n  \r\nexport default Button\r\n","import React, {  useState,useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Button from './Button'\r\n\r\nimport styles from '../styles/GameModal.module.css'\r\n\r\n  \r\n\r\nfunction GameModal(props) {\r\n\r\n  const {handleRematch,wantRematch} = props\r\n  const [msg, setMsg] = useState(\"Would you like a rematch?\")\r\n  \r\n\r\n\r\n useEffect(() => {\r\n  if (wantRematch)  {\r\n    \r\n    setMsg('Waiting on the other player')\r\n  }\r\n  \r\n }, [wantRematch])\r\n\r\n  \r\n    return (\r\n        \r\n      <dialog className ={styles.dialog} open >\r\n\r\n        <h2  className = {styles.title} >\r\n          \r\n         {msg}\r\n          </h2> \r\n      \r\n      {!wantRematch && <React.Fragment>\r\n        <Button text = \"Accept\" handleClick = {() => handleRematch(true)} />\r\n      <Button  text =\"Decline\"  handleClick = {() => handleRematch(false)} />\r\n      </React.Fragment>\r\n      \r\n      }\r\n  </dialog>\r\n    )\r\n}\r\n\r\n\r\nGameModal.propTypes = {\r\n\r\n  handleRematch: PropTypes.func,\r\n  wantRematch:PropTypes.bool,\r\n}\r\n\r\nexport default GameModal","import React, { useRef, useEffect,useState } from 'react'\r\nimport useGame from '../hooks/useGame'\r\n\r\nimport {ENDPOINT} from '../constants'\r\nimport Board from '../components/Board'\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { calculateWinner,containsNull } from '../helpers';\r\nimport styles from '../styles/Game.module.css'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport GameModal from '../components/GameModal';\r\nimport Button from '../components/Button';\r\n\r\n\r\nexport default function TwoPlayer() {\r\n\r\n    const game = useGame()\r\n    const [room, setRoom] = useState('')\r\n    const [msg, setMsg] = useState('')\r\n    const [rematchRequests, setRematchRequests] = useState([])\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const histroy = useHistory()\r\n    const [wantRematch, setWantRematch] = useState(false)\r\n    const {resetSquares,squares} = game\r\n\r\n    \r\n\r\n   \r\n    const socketRef = useRef()\r\n\r\n    /**\r\n     * Add the given respond to rematch requests array and server if user did not give a responds\r\n     * @param {Boolean} res \r\n     */\r\n    const handleRematch = (res) => {\r\n\r\n        if (wantRematch) {\r\n            \r\n            return\r\n        }\r\n        \r\n       setWantRematch(res)\r\n       setRematchRequests(requests => [...requests,res])\r\n       socketRef.current.emit('Rematch',res,room)\r\n\r\n    }\r\n\r\n\r\n\r\n    const handleClick = (i,x) => {\r\n\r\n        if (calculateWinner(game.squares) || !containsNull(game.squares) || wantRematch ||  game.squares[i]) {\r\n                        \r\n         \r\n            return\r\n        }\r\n\r\n        socketRef.current.emit('Mark',room,i)\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        const socket = socketIOClient(ENDPOINT)\r\n\r\n        socketRef.current = socket\r\n\r\n        socketRef.current.emit('Join Game')\r\n\r\n        socketRef.current.on('Start Game',(room) => {\r\n\r\n            setRoom(room)\r\n             \r\n        })\r\n\r\n        socketRef.current.on('Rematch', (res) => {\r\n         \r\n\r\n            setRematchRequests(requests => [...requests,res])\r\n\r\n            \r\n\r\n        })\r\n\r\n\r\n        socketRef.current.on('Join Game',(x) => {\r\n\r\n\r\n            if (!x) {\r\n\r\n                \r\n                game.toggleX()\r\n            }\r\n\r\n\r\n            socketRef.current.on('Mark',(i,x) => {\r\n\r\n                \r\n                game.markSquare(i,x)\r\n                game.toggleXTurn()\r\n            })\r\n        \r\n        })\r\n\r\n\r\n         socketRef.current.on('Leave Game',(msg) => {\r\n\r\n            \r\n              setMsg(msg)\r\n              socketRef.current.close()\r\n\r\n                  \r\n         })\r\n        return () => {\r\n            \r\n            socketRef.current.close()\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n       \r\n        if (calculateWinner(squares) || !containsNull(squares)) {\r\n            \r\n            setIsOpen(true)\r\n        }\r\n        if (rematchRequests.includes(false)) {\r\n\r\n        \r\n           socketRef.current.emit('Leave Game',room,'Game Over, click to go to the main menu')\r\n           setIsOpen(false)\r\n        }\r\n        else if (rematchRequests.length === 2) {\r\n            \r\n            setIsOpen(false)\r\n            resetSquares()\r\n            setRematchRequests([])\r\n            setWantRematch(false)\r\n        }\r\n       \r\n    }, [rematchRequests,resetSquares,histroy,squares,room])\r\n\r\n    \r\n    if (!room) {\r\n        \r\n       return <h2> Waiting for the other player </h2>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className = {styles.game}>\r\n            {msg &&  <Button text = {msg}  handleClick = {() => histroy.push('/')}/>}\r\n            <Board  handleClick = {handleClick} {...game}  />\r\n            {isOpen &&             <GameModal wantRematch = {wantRematch}  rematchRequests = {rematchRequests} handleRematch = {handleRematch} />}\r\n        </div>\r\n    )\r\n}\r\n","export const ENDPOINT = 'https://tic-tac-toe101.herokuapp.com/'","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '../components/Button'\r\nimport styles from '../styles/Home.module.css'\r\nexport default function Home() {\r\n\r\n    const history = useHistory()\r\n    return (\r\n        <div className = {styles.container}  >\r\n\r\n             <h1 className = {styles.title}>Tic-Tac-Toe</h1>  \r\n            <Button text = \"Single Player\" handleClick = {() => history.push('/SinglePlayer')}   />\r\n            <Button text = \"Two Player\"  handleClick = {() => history.push('/TwoPlayer')} />            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport Board from '../components/Board'\r\nimport Button from '../components/Button'\r\nimport { calculateWinner, containsNull } from '../helpers'\r\nimport useGame from '../hooks/useGame'\r\nimport styles from '../styles/Game.module.css'\r\n\r\n\r\nexport default function SinglePlayer() {\r\n\r\n    const game = useGame()\r\n    const {markSquare,toggleXTurn} = game\r\n    \r\n\r\n    /**\r\n     * \r\n     * Process square with given index for the given user\r\n     * @param {Number} i is the given index \r\n     * @param {Boolean} x is the given user\r\n     */\r\n    const handleClick = useCallback((i,x) => {\r\n\r\n        if (calculateWinner(game.squares) || !containsNull(game.squares) ||  game.squares[i]) {\r\n            \r\n         \r\n            return\r\n        }\r\n\r\n        markSquare(i,x)\r\n        toggleXTurn()\r\n\r\n       \r\n        \r\n\r\n    },[markSquare,toggleXTurn,game.squares])\r\n\r\n    /**\r\n     * \r\n     * @param {Array} squares \r\n     * @returns a random index from array if element is null\r\n     */\r\n    const chooseIndex = (squares) => {\r\n\r\n        let nullArray = []\r\n\r\n        for (let index = 0; index < squares.length; index++) {\r\n            const element = squares[index];\r\n\r\n            if (!element) {\r\n                \r\n                nullArray.push(index)\r\n            }\r\n            \r\n        }\r\n\r\n        let index = Math.random() * nullArray.length\r\n        index = Math.floor(index)\r\n\r\n        return nullArray[index]\r\n\r\n    \r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        \r\n        if ((game.isX && !game.xTurn) || (!game.isX && game.xTurn)) {\r\n\r\n            const index = chooseIndex(game.squares)\r\n            \r\n            handleClick(index,!game.isX)\r\n            \r\n\r\n        }\r\n       \r\n    }, [game.isX,game.xTurn,game.squares,handleClick])\r\n\r\n    return (\r\n        <div className = {styles.game}>\r\n\r\n            <Board isX = {game.isX} xTurn = {game.xTurn}  handleClick = {handleClick} squares = {game.squares}  />\r\n            <Button handleClick = {game.resetSquares} text = \"Reset\" />\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  HashRouter,\r\n} from \"react-router-dom\";\r\nimport TwoPlayer from './pages/TwoPlayer';\r\nimport Home from './pages/Home';\r\nimport SinglePlayer from './pages/SinglePlayer';\r\n\r\nfunction App() {\r\n  return (\r\n <div className = \"App\">\r\n     <HashRouter basename = {process.env.PUBLIC_URL}>\r\n      <Switch>\r\n    <Route  exact path=\"/TwoPlayer\">\r\n      <TwoPlayer />\r\n    </Route>\r\n    <Route exact path = \"/SinglePlayer\">\r\n      <SinglePlayer />\r\n    </Route>\r\n    <Route exact path=\"/\">\r\n      <Home />\r\n    </Route>\r\n  </Switch>\r\n   </HashRouter>\r\n </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}